name: 'CI Pipeline'

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  schedule:
    - cron: '0 0 * * 1' # Run weekly on Monday for npm audit
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  issues: write
  pull-requests: write

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.15.1'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Run unit tests
        run: npm run test:coverage

      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage/
          retention-days: 14

      - name: Build
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 1

  lighthouse:
    name: Lighthouse Performance
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'pull_request' || github.event_name == 'push'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Install serve
        run: npm install -g serve

      - name: Start application server
        run: |
          serve dist/devops-setup/browser --listen 3000 --single &
          echo $! > server.pid
          sleep 15

      - name: Verify server is running
        run: |
          timeout 30 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'
          echo "Server is ready!"

      - name: Create reports directory
        run: mkdir -p ./lighthouse-reports

      - name: Run Lighthouse
        run: |
          npm install -g lighthouse
          lighthouse http://localhost:3000 \
            --chrome-flags="--headless --no-sandbox --disable-gpu" \
            --skip-audits=seo \
            --output=json --output-path=./lighthouse-reports/report.json \
            --preset=desktop

      - name: Stop application server
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
            rm server.pid
          fi
          pkill -f "serve dist/devops-setup" || true
          sleep 2

      - name: Upload Lighthouse report
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-report
          path: ./lighthouse-reports/report.json

      - name: Lighthouse Check
        run: |
          PERFORMANCE_SCORE=$(cat ./lighthouse-reports/report.json | jq '.categories.performance.score')
          ACCESSIBILITY_SCORE=$(cat ./lighthouse-reports/report.json | jq '.categories.accessibility.score')
          BEST_PRACTICES_SCORE=$(cat ./lighthouse-reports/report.json | jq '.categories["best-practices"].score')

          # Convert scores to percentages
          PERFORMANCE_PCT=$(echo "$PERFORMANCE_SCORE * 100" | bc)
          ACCESSIBILITY_PCT=$(echo "$ACCESSIBILITY_SCORE * 100" | bc)
          BEST_PRACTICES_PCT=$(echo "$BEST_PRACTICES_SCORE * 100" | bc)

          # Check thresholds
          if (( $(echo "$PERFORMANCE_PCT < 90" | bc -l) )); then
            echo "Performance score too low: $PERFORMANCE_PCT"
            exit 1
          fi
          if (( $(echo "$ACCESSIBILITY_PCT < 90" | bc -l) )); then
            echo "Accessibility score too low: $ACCESSIBILITY_PCT"
            exit 1
          fi
          if (( $(echo "$BEST_PRACTICES_PCT < 90" | bc -l) )); then
            echo "Best Practices score too low: $BEST_PRACTICES_PCT"
            exit 1
          fi

          echo "All Lighthouse scores pass thresholds!"
          echo "Performance: $PERFORMANCE_PCT%"
          echo "Accessibility: $ACCESSIBILITY_PCT%"
          echo "Best Practices: $BEST_PRACTICES_PCT%"

  zap-scan:
    name: OWASP ZAP Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Install serve
        run: npm install -g serve

      - name: Start application server
        run: |
          serve dist/devops-setup/browser --listen 3000 --single &
          echo $! > server.pid
          sleep 15

      - name: Verify server is running
        run: |
          timeout 30 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'
          echo "Server is ready!"

      - name: ZAP Scan
        uses: zaproxy/action-baseline@v0.11.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Stop application server
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
            rm server.pid
          fi
          pkill -f "serve dist/devops-setup" || true
          sleep 2

      - name: Upload ZAP Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-scan-report
          path: |
            zap-baseline.html
            zap-baseline.json
          retention-days: 7

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: high
          vulnerability-check: true

  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for all branches and tags

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@v3.42.0
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  npm-audit:
    name: NPM Security Audit
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push' || github.event_name == 'schedule'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.15.1'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --production
        continue-on-error: true # Prevents non-critical issues from failing the workflow

      - name: Run npm audit for critical issues
        run: npm audit --audit-level=critical --production
        # This will fail if there are critical issues
